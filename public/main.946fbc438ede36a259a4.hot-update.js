/*! For license information please see main.946fbc438ede36a259a4.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/classes/Component.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var n=s("./node_modules/lodash/each.js"),a=s.n(n),o=s("./node_modules/events/events.js"),i=s.n(o);class l extends(i()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.element=document.querySelector(this.selector),this.elements={},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/components/Preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/gsap/index.js"),a=s("./app/classes/Component.js"),o=s("./node_modules/lodash/each.js"),i=s.n(o),l=s("./app/utils/text.js");class r extends a.default{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",images:document.querySelectorAll("img")}}),this.elements.titleSpans=(0,l.split)({element:this.elements.title,expression:"<br>"}),this.length=0,console.log(this.element,this.elements),this.createLoader()}createLoader(){i()(this.elements.images,(e=>{e.onload=t=>this.onAssetLoaded(e),e.src=e.getAttribute("data-src")}))}onAssetLoaded(e){this.length+=1;const t=this.length/this.elements.images.length;this.elements.number.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=n.default.timeline({delay:2}),this.animateOut.to(this.elements.titleSpans,{autoAlpha:0,duration:1.5,ease:"expo.out",stagger:.1,y:"100%"})}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,s)=>{s.r(t);var n=s("./node_modules/lodash/each.js"),a=s.n(n),o=s("./app/components/Preloader.js"),i=s("./app/pages/About/index.js"),l=s("./app/pages/Collections/index.js"),r=s("./app/pages/Detail/index.js"),d=s("./app/pages/Home/index.js");new class{constructor(){this.createPreloader(),this.createContent(),this.createPages(),this.addLinkListeners()}createPreloader(){this.preloader=new o.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,collections:new l.default,detail:new r.default,home:new d.default},this.page=this.pages[this.template],this.page.create(),this.page.show()}onPreloaded(){this.preloader.destroy()}async onChange(e){await this.page.hide();const t=await window.fetch(e);if(200===t.status){const e=await t.text(),s=document.createElement("div");s.innerHTML=e;const n=s.querySelector(".content");this.template=n.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.page=this.pages[this.template],this.page.create(),this.page.show(),this.addLinkListeners()}else console.log("Error")}addLinkListeners(){const e=document.querySelectorAll("a");a()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange(s)}}))}}}},(function(e){e.h=()=>"ddf9f538f640e0a684a6"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,