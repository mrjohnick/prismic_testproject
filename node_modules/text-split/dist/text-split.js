(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.TextSplit = factory());
}(this, (function () { 'use strict';

var separators = {
  letter: '',
  word: ' '
};

var split = function split(target) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$a11y = _ref.a11y,
      a11y = _ref$a11y === void 0 ? true : _ref$a11y,
      _ref$delimeter = _ref.delimeter,
      delimeter = _ref$delimeter === void 0 ? 'letter' : _ref$delimeter,
      _ref$each = _ref.each,
      each = _ref$each === void 0 ? null : _ref$each,
      _ref$element = _ref.element,
      element = _ref$element === void 0 ? 'span' : _ref$element;

  // ensure just text content, no children nodes
  var mustard = !target.children.length && target.textContent;

  if (!mustard) {
    throw new Error('text-split: target must have text content, and no children.');
  } // cache for created nodes


  var created = []; // split text based on delimeter

  var text = target.textContent.split(separators[delimeter]); // create an element for each piece of text
  // the element and index are passed to the each callback if it exists

  var frag = document.createDocumentFragment();
  var len = text.length;
  var index;
  var node;

  for (index = 0; index < len; index++) {
    node = document.createElement(element);
    node.textContent = text[index];
    if (a11y) node.setAttribute('aria-hidden', 'true');
    if (each) each(node, index);
    created.push(node);
    frag.appendChild(node);
  } // append label to target
  // must be done before clearing target.innerHTML


  if (a11y) target.setAttribute('aria-label', target.textContent); // clear text, and append fragment

  target.innerHTML = '';
  target.appendChild(frag); // return created nodes, as an array, for convenience's sake

  return created;
};

return split;

})));
